---
- hosts: localhost
  tasks:
    - name: Fetching my current IP address
      uri:
        url: http://checkip.amazonaws.com/
        return_content: yes
      register: my_ip

    - name: Creating the security group
      ec2_group:
        name: fc-webservers
        description: This is the security group for the user current IP
        region: us-east-1
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: "{{ my_ip.content | replace('\n', '') }}/32"
        rules_egress:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: fc_webservers_group

    - name: Creating the ELB
      ec2_elb_lb:
        name: fc-load-balancer
        state: present
        region: us-east-1
        zones:
          - us-east-1a
          - us-east-1b
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
      register: elb

    - name: Creating the EC2 instances
      ec2:
        key_name: fashion-cloud
        instance_type: t2.micro
        image: ami-9f086de0
        region: us-east-1
        group_id:
          - "{{ fc_webservers_group.group_id }}"
          - "{{ elb.elb.security_group_ids | first }}"
        wait: yes
        instance_tags:
          application: fashion-cloud
        exact_count: 2
        count_tag:
          application: fashion-cloud
      register: ec2_instances

    - name: Storing the EC2 provisioned instances IPs
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: ec2_instance_ips
      with_items: "{{ ec2_instances.tagged_instances }}"

    - name: Waiting for the servers to become online
      wait_for:
        host: "{{ item.public_ip }}"
        port: 22
        timeout: 180
      with_items: "{{ ec2_instances.tagged_instances }}"

    - name: Adding the EC2 instances to the local machine known hosts
      known_hosts:
        name: "{{ item.public_ip }}"
        key: "{{ lookup('pipe', 'ssh-keyscan -t rsa ' + item.public_ip) }}"
      with_items: "{{ ec2_instances.tagged_instances }}"

- hosts: ec2_instance_ips
  remote_user: ubuntu
  become: True
  tasks:
    - name: Install nginx
      apt:
        name: nginx
        state: present
    - name: Creating a small welcome index page
      copy:
        dest: /usr/share/nginx/html/index.html
        content: "Hello World - I am the {{ ansible_hostname }}"
    - name: Restart nginx
      service:
        name: nginx
        state: restarted

- hosts: localhost
  tasks:
    - name: Adding each EC2 instance to the ELB
      ec2_elb:
        state: present
        ec2_elbs: fc-load-balancer
        region: us-east-1
        instance_id: "{{ item.id }}"
      with_items: "{{ ec2_instances.tagged_instances }}"
